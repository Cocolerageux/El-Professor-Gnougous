"""
üîç DIAGNOSTIC DES COMMANDES DISCORD
===================================

V√©rifier pourquoi les commandes ne sont pas disponibles dans Discord.
"""

import asyncio
import discord
from discord.ext import commands
import json
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)

async def diagnostic_bot():
    print("üîç DIAGNOSTIC DES COMMANDES DISCORD")
    print("=" * 40)
    
    # Charger la configuration
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        print("‚úÖ Configuration charg√©e")
    except Exception as e:
        print(f"‚ùå Erreur de configuration : {e}")
        return
    
    # Configuration des intents
    intents = discord.Intents.default()
    intents.message_content = True
    intents.voice_states = True
    intents.members = True
    
    bot = commands.Bot(
        command_prefix='!',
        intents=intents,
        help_command=None
    )
    
    @bot.event
    async def on_ready():
        print(f"‚úÖ Bot connect√© : {bot.user}")
        print(f"üìä Guilds connect√©s : {len(bot.guilds)}")
        
        for guild in bot.guilds:
            print(f"   üè∞ {guild.name} (ID: {guild.id})")
            print(f"      üë• Membres : {guild.member_count}")
            
            # V√©rifier les permissions du bot
            bot_member = guild.get_member(bot.user.id)
            if bot_member:
                perms = bot_member.guild_permissions
                print(f"      üîë Permissions importantes :")
                print(f"         - Envoyer messages : {perms.send_messages}")
                print(f"         - Utiliser slash commands : {perms.use_slash_commands}")
                print(f"         - G√©rer r√¥les : {perms.manage_roles}")
                print(f"         - Voir canaux : {perms.view_channel}")
            
        # Lister les commandes slash
        try:
            synced = await bot.tree.sync()
            print(f"\nüîÑ Commandes synchronis√©es : {len(synced)}")
            for cmd in synced:
                print(f"   /{cmd.name} - {cmd.description}")
        except Exception as e:
            print(f"‚ùå Erreur de synchronisation : {e}")
        
        # Tester une commande simple
        print("\nüß™ Test d'une commande simple...")
        
        await bot.close()
    
    @bot.tree.command(name="test", description="Commande de test simple")
    async def test_command(interaction: discord.Interaction):
        await interaction.response.send_message("‚úÖ Le bot fonctionne !", ephemeral=True)
    
    try:
        await bot.start(config['bot_token'])
    except Exception as e:
        print(f"‚ùå Erreur de connexion : {e}")

def check_config():
    """V√©rifier la configuration"""
    print("\nüîß V√âRIFICATION DE LA CONFIGURATION")
    print("=" * 40)
    
    try:
        with open("config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        
        # V√©rifier les cl√©s importantes
        required_keys = ['bot_token', 'guild_id']
        for key in required_keys:
            if key in config:
                if key == 'bot_token':
                    token_preview = config[key][:20] + "..." if config[key] else "VIDE"
                    print(f"‚úÖ {key} : {token_preview}")
                else:
                    print(f"‚úÖ {key} : {config[key]}")
            else:
                print(f"‚ùå {key} : MANQUANT")
        
        # V√©rifier le guild_id
        if 'guild_id' in config and config['guild_id']:
            print(f"üè∞ Serveur cible : {config['guild_id']}")
        else:
            print("‚ö†Ô∏è  Aucun guild_id sp√©cifi√© - commandes globales (peut prendre 1h)")
            
    except Exception as e:
        print(f"‚ùå Erreur de lecture config : {e}")

def show_troubleshooting():
    """Afficher les solutions de d√©pannage"""
    print("\nüõ†Ô∏è SOLUTIONS POSSIBLES")
    print("=" * 30)
    print()
    print("1Ô∏è‚É£ **Permissions du bot sur Discord :**")
    print("   - Le bot doit avoir la permission 'applications.commands'")
    print("   - V√©rifiez l'URL d'invitation du bot")
    print("   - R√©invitez le bot avec les bonnes permissions")
    print()
    print("2Ô∏è‚É£ **Synchronisation des commandes :**")
    print("   - Les commandes peuvent prendre du temps √† appara√Ætre")
    print("   - Essayez de red√©marrer Discord")
    print("   - Attendez quelques minutes")
    print()
    print("3Ô∏è‚É£ **Configuration guild_id :**")
    print("   - Sp√©cifiez l'ID du serveur dans config.json")
    print("   - Les commandes de serveur apparaissent imm√©diatement")
    print("   - Les commandes globales prennent jusqu'√† 1 heure")
    print()
    print("4Ô∏è‚É£ **URL d'invitation correcte :**")
    print("   https://discord.com/oauth2/authorize?client_id=VOTRE_BOT_ID&permissions=8&scope=bot%20applications.commands")
    print()
    print("5Ô∏è‚É£ **V√©rifications Discord :**")
    print("   - Tapez '/' dans un canal pour voir les commandes")
    print("   - V√©rifiez que le bot est en ligne")
    print("   - Le bot doit avoir acc√®s au canal")

if __name__ == "__main__":
    check_config()
    show_troubleshooting()
    
    print("\nüöÄ Lancement du diagnostic...")
    asyncio.run(diagnostic_bot())
